AT_BANNER([OVSDB -- logging])

AT_SETUP([ovsdb-log - create empty, reread])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([log])
AT_CHECK(
  [test-ovsdb log-io file create], [0], 
  [file: open successful
], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read], [0], 
  [file: open successful
file: read: end of log
], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write one, reread])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}']], [0],
  [[file: open successful
file: write:{"x":0} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - check that create fails if file exists])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":1}']], [0],
  [[file: open successful
file: write:{"x":1} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read], [0], 
  [[file: open successful
file: read: {"x":1}
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file create-excl read 2>&1 | grep -q "create failed"], [0],
  [], [])
AT_CHECK(
  [test-ovsdb log-io file create read], [0],
  [file: open successful
file: read: {"x":1}
])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write one, reread])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write one, replace, commit])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
for option in '' --no-rename-open-files; do
    rm -f file
    AT_CHECK(
      [[test-ovsdb $option log-io file create \
          'write:{"x":0}' \
          'replace_start' \
          'new-write:{"x":1}' \
          'new-write:{"x":2}' \
          'old-write:{"x":4}' \
          'replace_commit' \
          'read' \
          'write:{"x":3}']], [0],
      [[file: open successful
file: write:{"x":0} successful
file: replace_start successful
(temp): write:{"x":1} successful
(temp): write:{"x":2} successful
file: write:{"x":4} successful
file: replace_commit successful
file: read: end of log
file: write:{"x":3} successful
]])
    AT_CHECK(
      [test-ovsdb log-io file read-only read read read read], [0],
      [[file: open successful
file: read: {"x":1}
file: read: {"x":2}
file: read: {"x":3}
file: read: end of log
]], [ignore])
done
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write one, replace, abort])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
for option in '' --no-rename-open-files; do
    rm -f file
    AT_CHECK(
      [[test-ovsdb $option log-io file create \
          'write:{"x":0}' \
          'replace_start' \
          'new-write:{"x":1}' \
          'new-write:{"x":2}' \
          'old-write:{"x":4}' \
          'replace_abort' \
          'read' \
          'write:{"x":3}']], [0],
      [[file: open successful
file: write:{"x":0} successful
file: replace_start successful
(temp): write:{"x":1} successful
(temp): write:{"x":2} successful
file: write:{"x":4} successful
file: replace_abort successful
file: read: end of log
file: write:{"x":3} successful
]])
    AT_CHECK(
      [test-ovsdb log-io file read-only read read read read], [0],
      [[file: open successful
file: read: {"x":0}
file: read: {"x":4}
file: read: {"x":3}
file: read: end of log
]], [ignore])
done
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write one, reread - alternative magic])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
# Sometimes you just need more magic:
# http://www.catb.org/jargon/html/magic-story.html
AT_CHECK(
  [[test-ovsdb --magic="MORE_MAGIC" log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb --magic="MORE_MAGIC" log-io file read-only read read read read], [0],
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read: end of log
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only 2>&1 | grep -q "cannot identify file type"], [0], [],
  [])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write one, reread, append])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK(
  [[test-ovsdb log-io file read/write read read read 'write:{"append":0}']], [0],
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: write:{"append":0} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read: {"append":0}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write, reread one, overwrite])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK(
  [[test-ovsdb log-io file read/write read 'write:{"more data":0}']], [0],
  [[file: open successful
file: read: {"x":0}
file: write:{"more data":0} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: {"more data":0}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write, add corrupted data, read])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK([bash -c "echo 'xxx' >> file.*"])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read read | sed -e 's|error: .*file[[.0-9]]*:|error: file:|'], [0],
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read failed: syntax error: file: parse error at offset 225 in header line "xxx"
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write, add corrupted data, read, overwrite])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK([bash -c "echo 'xxx' >> file.*"])
AT_CHECK(
  [[test-ovsdb log-io file read/write read read read read 'write:{"x":3}' | sed -e 's|error: .*file[.0-9]*:|error: file:|']], [0],
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read failed: syntax error: file: parse error at offset 225 in header line "xxx"
file: write:{"x":3} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read: {"x":3}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write, corrupt some data, read, overwrite])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK([[bash -c "sed 's/{\"x\":2}/{\"x\":3}/' < file.* > file.tmp"]])
AT_CHECK([mv file.tmp file])
AT_CHECK([[bash -c "rm file.*"]])
AT_CHECK([[grep -c '{"x":3}' file]], [0], [1
])
AT_CHECK(
  [[test-ovsdb log-io file read/write read read read 'write:{"longer data":0}' | sed -e 's|error: .*file[.0-9]*:|error: file:|']], [0],
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read failed: syntax error: file: 20 bytes starting at offset 205 have SHA-1 hash 9611766b297a4c0e018f0f7bb8ddb140f3b6fc73 but should have hash d112cf97136ed93021698d0582a4b237ef2a6a64
file: write:{"longer data":0} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"longer data":0}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write, truncate file, read, overwrite])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK([[bash -c "sed 's/{\"x\":2}/2/' < file.* > file.tmp"]])
AT_CHECK([mv file.tmp file])
AT_CHECK([[bash -c "rm file.*"]])
AT_CHECK([[grep -c '^{"logdata":2}$' file]], [0], [1
])
AT_CHECK(
  [[test-ovsdb log-io file read/write read read read 'write:{"longer data":0}' | sed -e 's|error: .*file[.0-9]*:|error: file:|']], [0],
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read failed: I/O error: file: error reading 20 bytes starting at offset 205 (End of file)
file: write:{"longer data":0} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"longer data":0}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP

AT_SETUP([ovsdb-log - write bad JSON, read, overwrite])
AT_KEYWORDS([ovsdb log])
AT_CAPTURE_FILE([file])
AT_CHECK(
  [[test-ovsdb log-io file create 'write:{"x":0}' 'write:{"x":1}' 'write:{"x":2}']], [0],
  [[file: open successful
file: write:{"x":0} successful
file: write:{"x":1} successful
file: write:{"x":2} successful
]], [ignore])
AT_CHECK([[bash -c "printf '%s\n%s\n' 'OVSDB JSON 5 d910b02871075d3156ec8675dfc95b7d5d640aa6' 'null' >> file.*"]])
AT_CHECK(
  [[test-ovsdb log-io file read/write read read read read 'write:{"replacement data":0}' | sed -e 's|error: .*file[.0-9]*:|error: file:|']], [0],
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read failed: syntax error: file: 5 bytes starting at offset 279 are not valid JSON (line 0, column 4, byte 4: syntax error at beginning of input)
file: write:{"replacement data":0} successful
]], [ignore])
AT_CHECK(
  [test-ovsdb log-io file read-only read read read read read], [0], 
  [[file: open successful
file: read: {"x":0}
file: read: {"x":1}
file: read: {"x":2}
file: read: {"replacement data":0}
file: read: end of log
]], [ignore])
AT_CHECK([test -f .file.~lock~])
AT_CLEANUP
