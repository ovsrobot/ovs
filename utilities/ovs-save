#! /bin/sh

# Copyright (c) 2011, 2013, 2016 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

case $0 in
    */*) dir0=`echo "$0" | sed 's,/[^/]*$,,'` ;;
    *) dir0=./ ;;
esac
. "$dir0/ovs-lib" || exit 1

usage() {
    UTIL=$(basename $0)
    cat <<EOF
${UTIL}: Provides helper functions to save Open vSwitch's configuration.
usage: $0 COMMAND

Commands:
 save-interfaces        Outputs a shell script on stdout that will restore
                        the current kernel configuration of the specified
                        network interfaces, as well as the system iptables
                        configuration.
 save-flows             Outputs a shell script on stdout that will restore
                        OpenFlow flows of each Open vSwitch bridge.
 save-lacp              Outputs a shell script on stdout that will restore
                        lacp info of each lacp bond port.
This script is meant as a helper for the Open vSwitch init script commands.
EOF
}

save_interfaces () {
    if (ip link show) > /dev/null 2>&1; then :; else
        echo "$0: ip not found in $PATH" >&2
        exit 1
    fi

    if test "$#" = 0; then
        exit 0
    fi

    devs="$@"
    for dev in $devs; do
        state=`ip link show dev $dev` || continue

        echo "# $dev"
        # Link state (Ethernet addresses, up/down, ...)
        linkcmd=
        case $state in
            *"state UP"* | *[,\<]"UP"[,\>]* )
                linkcmd="$linkcmd up"
                ;;
            *"state DOWN"*)
                linkcmd="$linkcmd down"
                ;;
        esac
        if expr "$state" : '.*\bdynamic\b' > /dev/null; then
            linkcmd="$linkcmd dynamic"
        fi
        if qlen=`expr "$state" : '.*qlen \([0-9]\+\)'`; then
            linkcmd="$linkcmd txqueuelen $qlen"
        fi
        if hwaddr=`expr "$state" : '.*link/ether \([^ ]*\)'`; then
            linkcmd="$linkcmd address $hwaddr"
        fi
        if brd=`expr "$state" : '.*brd \([^ ]*\)'`; then
            linkcmd="$linkcmd broadcast $brd"
        fi
        if mtu=`expr "$state" : '.*mtu \([0-9]\+\)'`; then
            linkcmd="$linkcmd mtu $mtu"
        fi
        if test -n "$linkcmd"; then
            echo ip link set dev $dev down # Required to change hwaddr.
            echo ip link set dev $dev $linkcmd
        fi

        move_ip_address $dev $dev

        move_ip_routes $dev $dev

        echo
    done

    if (iptables-save) > /dev/null 2>&1; then
        echo "# global"
        echo "iptables-restore <<'EOF'"
        iptables-save
        echo "EOF"
    else
        echo "# iptables-save not found in $PATH, not saving iptables state"
    fi
}

get_highest_ofp_version() {
    ovs-vsctl get bridge "$1" protocols | \
        sed 's/[][]//g' | sed 's/\ //g' | \
            awk -F ',' '{ print (NF>0)? $(NF) : "OpenFlow14" }'
}

save_flows () {
    if (ovs-ofctl --version) > /dev/null 2>&1; then :; else
        echo "$0: ovs-ofctl not found in $PATH" >&2
        exit 1
    fi

    # OVS 2.7 and earlier do not enable OpenFlow 1.4 (by default) and lack
    # other features needed to save and restore flows.  Don't try.
    case `ovs-appctl version | sed 1q` in
        "ovs-vswitchd (Open vSwitch) 1."*.*)
            return
            ;;
        "ovs-vswitchd (Open vSwitch) 2."[0-7].*)
            return
            ;;
    esac

    workdir=$(mktemp -d "${TMPDIR:-/tmp}/ovs-save.XXXXXXXXXX")
    for bridge in "$@"; do
        # Get the highest enabled OpenFlow version
        ofp_version=$(get_highest_ofp_version "$bridge")

        printf "%s" "ovs-ofctl -O $ofp_version add-tlv-map ${bridge} '"
        ovs-ofctl dump-tlv-map ${bridge} -O $ofp_version | \
        awk '/^  *0x/ {if (cnt != 0) printf ","; \
             cnt++;printf "{class="$1",type="$2",len="$3"}->"$4}'
        echo "'"

        # If possible use OpenFlow 1.4 atomic bundle txn for flows and groups
        [ ${ofp_version#OpenFlow} -ge 14 ] && bundle=" --bundle" || bundle=""

        echo "ovs-ofctl -O $ofp_version add-groups ${bridge} \
              \"$workdir/$bridge.groups.dump\" ${bundle}"

        echo "ovs-ofctl -O $ofp_version replace-flows ${bridge} \
              \"$workdir/$bridge.flows.dump\" ${bundle}"

        ovs-ofctl -O $ofp_version dump-groups "$bridge" | \
            sed -e '/^OFPST_GROUP_DESC/d' \
                -e '/^NXST_GROUP_DESC/d' > \
                "$workdir/$bridge.groups.dump"

        ovs-ofctl -O $ofp_version dump-flows --no-names --no-stats "$bridge" | \
            sed -e '/NXST_FLOW/d' \
                -e '/OFPST_FLOW/d' \
                -e 's/\(idle\|hard\)_age=[^,]*,//g' \
                -e 's/igmp_type/tp_src/g' \
                -e 's/igmp_code/tp_dst/g' \
                -e 's/igmp/ip,nw_proto=2/g' > \
                "$workdir/$bridge.flows.dump"
    done
    echo "rm -rf \"$workdir\""
}

save_lacp () {
    if (ovs-appctl --version) > /dev/null 2>&1; then :; else
        echo "$0: ovs-ofctl not found in $PATH" >&2
        exit 1
    fi

    case `ovs-appctl version | sed 1q` in
        "ovs-vswitchd (Open vSwitch) 1."*.*)
            return
            ;;
    esac

    SP="[[:space:]]*"
    BOND_NAME_PATTERN="s/^----${SP}([^[:space:]]+)${SP}----.*/\1/"
    STATUS_PATTERN="s/^status:${SP}(.*)/\1/"
    SYS_ID_PATTERN="s/^sys_id:${SP}(.*)/\1/"
    SYS_PRIORITY_PATTERN="s/^sys_priority:${SP}(.*)/\1/"
    AGGREGATION_KEY_PATTERN="s/^aggregation${SP}key:${SP}(.*)/\1/"
    LACP_TIME_PATTERN="s/^lacp_time:${SP}(.*)/\1/"
    MEMBER_PATTERN="s/^(member|slave):${SP}([^:]+):${SP}(.*)/\2/"
    MEMBER_STATUS_PATTERN="s/^(member|slave):${SP}([^:]+):${SP}(.*)/\3/"
    PORT_ID_PATTERN="s/^port_id:${SP}(.*)/\1/"
    PORT_PRIORITY_PATTERN="s/^port_priority:${SP}(.*)/\1/"
    MAY_ENABLE_PATTERN="s/^may_enable:${SP}(.*)/\1/"
    ACTOR_SYS_ID_PATTERN="s/^actor${SP}sys_id:${SP}(.*)/\1/"
    ACTOR_SYS_PRIORITY_PATTERN="s/^actor${SP}sys_priority:${SP}(.*)/\1/"
    ACTOR_PORT_ID_PATTERN="s/^actor${SP}port_id:${SP}(.*)/\1/"
    ACTOR_PORT_PRIORITY_PATTERN="s/^actor${SP}port_priority:${SP}(.*)/\1/"
    ACTOR_KEY_PATTERN="s/^actor${SP}key:${SP}(.*)/\1/"
    ACTOR_STATE_PATTERN="s/^actor${SP}state:${SP}(.*)/\1/"
    PARTNER_SYS_ID_PATTERN="s/^partner${SP}sys_id:${SP}(.*)/\1/"
    PARTNER_SYS_PRIORITY_PATTERN="s/^partner${SP}sys_priority:${SP}(.*)/\1/"
    PARTNER_PORT_ID_PATTERN="s/^partner${SP}port_id:${SP}(.*)/\1/"
    PARTNER_PORT_PRIORITY_PATTERN="s/^partner${SP}port_priority:${SP}(.*)/\1/"
    PARTNER_KEY_PATTERN="s/^partner${SP}key:${SP}(.*)/\1/"
    PARTNER_STATE_PATTERN="s/^partner${SP}state:${SP}(.*)/\1/"
    tmpfile=$(mktemp)
    ovs-appctl lacp/show | while IFS= read -r line; do
        t=$(echo "$line" | sed -E 's/^[[:space:]]+//')
        case "$t" in
            ----*----*)
                BOND_NAME=$(echo "$t" | sed -E "$BOND_NAME_PATTERN")
                ;;
            status:${SP})
                STATUS=$(echo "$t" | sed -E "$STATUS_PATTERN" | sed 's/ /+/g')
                ;;
            sys_id:${SP})
                SYS_ID=$(echo "$t" | sed -E "$SYS_ID_PATTERN")
                ;;
            sys_priority:${SP})
                SYS_PRIORITY=$(echo "$t" | sed -E "$SYS_PRIORITY_PATTERN")
                ;;
            aggregation${SP}key:${SP})
                AGGREGATION_KEY=$(echo "$t" |
                    sed -E "$AGGREGATION_KEY_PATTERN")
                ;;
            lacp_time:${SP})
                LACP_TIME=$(echo "$t" | sed -E "$LACP_TIME_PATTERN")
                cmd="ovs-appctl lacp/set $BOND_NAME port status=$STATUS,"
                cmd="${cmd}sys_id=$SYS_ID,sys_priority=$SYS_PRIORITY,"
                cmd="${cmd}key=$AGGREGATION_KEY,lacp_time=$LACP_TIME"
                echo "$cmd" >> "$tmpfile"
                ;;
            member:${SP}|slave:${SP})
                # Extract member name and status
                MEMBER_NAME=$(echo "$t" | sed -E "$MEMBER_PATTERN")
                MEMBER_STATUS=$(echo "$t" |
                    sed -E "$MEMBER_STATUS_PATTERN" | sed 's/ /+/g')
                ;;
            port_id:${SP})
                PORT_ID=$(echo "$t" | sed -E "$PORT_ID_PATTERN")
                ;;
            port_priority:${SP})
                PORT_PRIORITY=$(echo "$t" | sed -E "$PORT_PRIORITY_PATTERN")
                ;;
            may_enable:${SP})
                MAY_ENABLE=$(echo "$t" | sed -E "$MAY_ENABLE_PATTERN")
                # Print member information
                cmd="ovs-appctl lacp/set $BOND_NAME member $MEMBER_NAME member"
                cmd="${cmd} status=$MEMBER_STATUS,port_id=$PORT_ID,"
                cmd="${cmd}port_priority=$PORT_PRIORITY,may_enable=$MAY_ENABLE"
                echo "$cmd" >> "$tmpfile"
                ;;
            actor${SP}sys_id:${SP})
                ACTOR_SYS_ID=$(echo "$t" | sed -E "$ACTOR_SYS_ID_PATTERN")
                ;;
            actor${SP}sys_priority:${SP})
                ACTOR_SYS_PRIORITY=$(echo "$t" |
                    sed -E "$ACTOR_SYS_PRIORITY_PATTERN")
                ;;
            actor${SP}port_id:${SP})
                ACTOR_PORT_ID=$(echo "$t" | sed -E "$ACTOR_PORT_ID_PATTERN")
                ;;
            actor${SP}port_priority:${SP})
                ACTOR_PORT_PRIORITY=$(echo "$t" |
                    sed -E "$ACTOR_PORT_PRIORITY_PATTERN")
                ;;
            actor${SP}key:${SP})
                ACTOR_KEY=$(echo "$t" | sed -E "$ACTOR_KEY_PATTERN")
                ;;
            actor${SP}state:${SP})
                ACTOR_STATE=$(echo "$t" |
                    sed -E "$ACTOR_STATE_PATTERN" | sed 's/ /+/g')
                # Print actor information
                cmd="ovs-appctl lacp/set $BOND_NAME member $MEMBER_NAME actor"
                cmd="${cmd} sys_id=$ACTOR_SYS_ID,"
                cmd="${cmd}sys_priority=$ACTOR_SYS_PRIORITY,"
                cmd="${cmd}port_id=$ACTOR_PORT_ID,"
                cmd="${cmd}port_priority=$ACTOR_PORT_PRIORITY,"
                cmd="${cmd}key=$ACTOR_KEY,state=$ACTOR_STATE"
                echo "$cmd" >> "$tmpfile"
                ;;
            partner${SP}sys_id:${SP})
                PARTNER_SYS_ID=$(echo "$t" |
                    sed -E "$PARTNER_SYS_ID_PATTERN")
                ;;
            partner${SP}sys_priority:${SP})
                PARTNER_SYS_PRIORITY=$(echo "$t" |
                    sed -E "$PARTNER_SYS_PRIORITY_PATTERN")
                ;;
            partner${SP}port_id:${SP})
                PARTNER_PORT_ID=$(echo "$t" |
                    sed -E "$PARTNER_PORT_ID_PATTERN")
                ;;
            partner${SP}port_priority:${SP})
                PARTNER_PORT_PRIORITY=$(echo "$t" |
                    sed -E "$PARTNER_PORT_PRIORITY_PATTERN")
                ;;
            partner${SP}key:${SP})
                PARTNER_KEY=$(echo "$t" | sed -E "$PARTNER_KEY_PATTERN")
                ;;
            partner${SP}state:${SP})
                PARTNER_STATE=$(echo "$t" |
                    sed -E "$PARTNER_STATE_PATTERN" | sed 's/ /+/g')
                # Print partner information
                cmd="ovs-appctl lacp/set $BOND_NAME"
                cmd="${cmd} member $MEMBER_NAME partner"
                cmd="${cmd} sys_id=$PARTNER_SYS_ID,"
                cmd="${cmd}sys_priority=$PARTNER_SYS_PRIORITY,"
                cmd="${cmd}port_id=$PARTNER_PORT_ID,"
                cmd="${cmd}port_priority=$PARTNER_PORT_PRIORITY,"
                cmd="${cmd}key=$PARTNER_KEY,state=$PARTNER_STATE"
                echo "$cmd" >> "$tmpfile"
                ;;
        esac
    done
    sed -i '1!G;h;$!d' "$tmpfile"
    cat "$tmpfile"
    rm -f "$tmpfile"
}


while [ $# -ne 0 ]
do
    case $1 in
        "save-flows")
            shift
            save_flows "$@"
            exit 0
            ;;
        "save-interfaces")
            shift
            save_interfaces "$@"
            exit 0
            ;;
        "save-lacp")
            shift
            save_lacp "$@"
            exit 0
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            echo >&2 "$0: unknown command \"$1\" (use --help for help)"
            exit 1
            ;;
    esac
done

exit 0
