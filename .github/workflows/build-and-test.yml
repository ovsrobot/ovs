name: Build and Test

on: [push, pull_request]

jobs:
  build-linux:
    env:
      dependencies: |
        automake libtool gcc bc libjemalloc1 libjemalloc-dev    \
        libssl-dev llvm-dev libelf-dev libnuma-dev              \
        python-sphinx selinux-policy-dev gcc-multilib
      CC:          ${{ matrix.compiler }}
      DPDK:        ${{ matrix.dpdk }}
      DPDK_SHARED: ${{ matrix.dpdk_shared }}
      KERNEL:      ${{ matrix.kernel }}
      LIBS:        ${{ matrix.libs }}
      BUILD_ENV:   ${{ matrix.build_env }}
      OPTS:        ${{ matrix.opts }}
      TESTSUITE:   ${{ matrix.testsuite }}

    name: linux ${{ join(matrix.*, ' ') }}
    runs-on: ubuntu-18.04
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        compiler:    [gcc, clang]
        kernel:      ['5.0',  '4.20', '4.19', '4.18', '4.17', '4.16',
                      '4.15', '4.14', '4.9',  '4.4',  '3.16']
        opts:        ['']
        testsuite:   ['']
        dpdk:        ['']
        dpdk_shared: ['']
        build_env:   ['']
        include:
          - compiler:     gcc
            opts:         --disable-ssl
          - compiler:     clang
            opts:         --disable-ssl

          - compiler:     gcc
            testsuite:    test
            kernel:       3.16
          - compiler:     clang
            testsuite:    test
            kernel:       3.16

          - compiler:     gcc
            testsuite:    test
            opts:         --enable-shared
          - compiler:     clang
            testsuite:    test
            opts:         --enable-shared

          - compiler:     gcc
            testsuite:    test
            dpdk:         dpdk
          - compiler:     clang
            testsuite:    test
            dpdk:         dpdk

          - compiler:     gcc
            testsuite:    test
            libs:         -ljemalloc
          - compiler:     clang
            testsuite:    test
            libs:         -ljemalloc

          - compiler:     gcc
            dpdk:         dpdk
            opts:         --enable-shared
          - compiler:     clang
            dpdk:         dpdk
            opts:         --enable-shared

          - compiler:     gcc
            dpdk_shared:  dpdk-shared
          - compiler:     clang
            dpdk_shared:  dpdk-shared

          - compiler:     gcc
            dpdk_shared:  dpdk-shared
            opts:         --enable-shared
          - compiler:     clang
            dpdk_shared:  dpdk-shared
            opts:         --enable-shared

          - compiler:     gcc
            build_env:    -m32
            opts:         --disable-ssl

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: install common dependencies
      run:  sudo apt install -y ${{ env.dependencies }}
    - name: install libunbound
      if:   matrix.build_env == ''
      run:  sudo apt install -y libunbound-dev

    - name: prepare
      run:  ./.ci/linux-prepare.sh

    - name: build
      run:  PATH="$PATH:$HOME/bin" ./.ci/linux-build.sh ${{ env.OPTS }}

    - name: copy logs on failure
      if: failure() || cancelled()
      run: |
        # upload-artifact@v2 throws exceptions if it tries to upload socket
        # files and we could have some socket files in testsuite.dir.
        # Also, upload-artifact@v2 doesn't work well enough with wildcards.
        # So, we're just archiving everything here to avoid any issues.
        mkdir logs
        cp config.log ./logs/
        cp -r ./*/_build/sub/tests/testsuite.* ./logs/ || true
        tar -czvf logs.tgz logs/

    - name: upload logs on failure
      if: failure() || cancelled()
      uses: actions/upload-artifact@v2
      with:
        name: logs-linux-${{ join(matrix.*, '-') }}
        path: logs.tgz

  build-osx:
    env:
      CC:    clang
      OPTS:  --disable-ssl

    name:    osx clang --disable-ssl
    runs-on: macos-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: install dependencies
      run:  brew install automake libtool
    - name: prepare
      run:  ./.ci/osx-prepare.sh
    - name: build
      run:  PATH="$PATH:$HOME/bin" ./.ci/osx-build.sh
    - name: upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: logs-osx-clang---disable-ssl
        path: config.log
